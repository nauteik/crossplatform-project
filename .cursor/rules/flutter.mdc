---
description: 
globs: frontend-user/lib/**/*.*
alwaysApply: false
---
---
description: 
globs: lib/**/*.*
alwaysApply: false
---
# You are developing a Flutter Project 3.13.0 and upper

## Nguyên tắc cơ bản

> **Đảm bảo:** Các screen được push vào navigator được bao quanh trong Scaffold()
- Tránh sử dụng chiều cao và chiều rộng cố định để có thể responsive giữa mobile và web browser.
- Sử dụng navigator và route.
- Sử dụng provider cho quản lý state.
- Sử dụng SafeArea cho các widget cần thiết.
- Đảm bảo khả năng responsive cho trình duyệt web (sử dụng cách được khuyến nghị để tạo ứng dụng responsive).
- Các hàm tiện ích (formatCurrency,...) sẽ được đặt trong lib/core/utils.
- Sử dụng .withValues thay vì .withOpacity (example: Colors.black.withValues(alpha: 0.08))

## Quy ước viết Widget

Khi tạo stateful widget, đảm bảo sử dụng định dạng dưới đây (không quan trọng tên widget):

```dart
class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key});

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}
```

## Nguyên tắc lập trình

### Nguyên tắc cơ bản
- Tuân thủ nguyên tắc SOLID.
- Sử dụng kiến trúc sạch (clean architecture):
  - Xem modules nếu bạn cần tổ chức mã thành các module
  - Xem lib/core/services nếu bạn cần tổ chức mã thành các dịch vụ
  - Xem data/models nếu bạn cần tổ chức mã thành các model
  - Xem data/repositories nếu bạn cần tổ chức mã thành các repository
- Sử dụng repository pattern cho việc lưu trữ dữ liệu:
  - Xem cache nếu bạn cần cache dữ liệu

### Cấu trúc Widget
- Khi cây widget trở nên quá sâu, nó có thể dẫn đến thời gian xây dựng lâu hơn và tăng mức sử dụng bộ nhớ.
- Cấu trúc widget phẳng hơn giúp dễ hiểu và sửa đổi mã. Các thành phần có thể tái sử dụng cũng tạo điều kiện tổ chức mã tốt hơn.
- Tránh lồng các Widget quá sâu trong Flutter. Các widget được lồng sâu có thể ảnh hưởng tiêu cực đến khả năng đọc, bảo trì và hiệu suất của ứng dụng Flutter.
- Các widget lồng sâu có thể làm cho việc quản lý state khó khăn hơn. Bằng cách giữ cây nông, việc quản lý state và truyền dữ liệu giữa các widget trở nên dễ dàng hơn.
- Chia các widget lớn thành các widget nhỏ hơn, tập trung hơn.
- Sử dụng const constructors ở bất cứ nơi nào có thể để giảm việc rebuild.

## Ensure you are following below project structure 
--
lib/
│── main.dart              # Entry point
│── app.dart               # App root widget, theme, and navigation
│
├── core/                  # Core utilities (shared across app)
│   ├── constants/         # App-wide constants (strings, colors)
│   ├── theme/             # App theme & styles
│   ├── utils/             # Helper functions & extensions
│   ├── services/          # API & local storage handling
│   ├── routes/            # Navigation setup
│
├── data/                  # Data handling layer
│   ├── models/            # Data models
│   ├── repositories/      # Repository pattern for fetching data
│
├── features/              # Feature-based modules
│   ├── auth/              # Example: Authentication feature
│   │   ├── presentation/
│   │   │   ├── screens/   # Screens/UI
│   │   │   ├── widgets/   # Reusable UI components
│   │   ├── providers/     # Providers for state management
│
├── widgets/               # Reusable widgets